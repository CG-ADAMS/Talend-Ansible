# Configuration file for the Job Server agent.

# each second, files are checked. This value determines how many check are needed to ensure file is completely copied into directory
org.talend.remote.jobserver.server.fileevent.FileChangedSensor.FileEvent.checkFileCountBeforeFire={{ checkFileCountBeforeFire }}

### Define ports
# the port used to launch talend commands
org.talend.remote.jobserver.server.TalendJobServer.COMMAND_SERVER_PORT={{ command_server_port }}

# the port for the file transfert
org.talend.remote.jobserver.server.TalendJobServer.FILE_SERVER_PORT={{ file_server_port }}

# The port used for monitoring the servers state
org.talend.remote.jobserver.server.TalendJobServer.MONITORING_PORT={{ monitoring_port }}

# The local hostname of this server (default value is "localhost")
org.talend.remote.jobserver.server.TalendJobServer.LOCAL_HOST={{ local_host }}

# Use SSL (Secure Sockets Layer) for establishing an encrypted link between the JobServer and its clients
org.talend.remote.jobserver.server.TalendJobServer.USE_SSL={{ use_ssl }}

# Disabled SSL cipher suites(Java standard cipher suite names separated by a comma ',').If not set,all the supported ciphers will be enabled
org.talend.remote.jobserver.server.TalendJobServer.DISABLED_CIPHER_SUITES={{ disabled_cipher_suites }}

# Allow specified OS users (separated by a comma ',') to start jobs. If commented or empty, all users are allowed. Wilcard is allowed. Example: RUN_AS_WHITELIST=myuser1,this.super-user, sub-user2,userprod*
org.talend.remote.jobserver.server.TalendJobServer.RUN_AS_WHITELIST={{ run_as_whitelist }}

# Ensure that undesired instructions are not inserted in the user name variable.
org.talend.remote.jobserver.server.TalendJobServer.RUN_AS_USER_VALIDATION_REGEXP={{ run_as_user_validation_regexp }}

# For remote monitoring and management (e.g. using jconsole) set the following port equal to the
# org.talend.remote.jobserver.server.TalendJobServerMain.MONITORING_PORT
# com.sun.management.jmxremote.port=8888

# list of partitions for this server separated by commas
#org.talend.monitoring.jmx.server.OsInfoRetriever.OS_PARTITIONS=/,/dev,/home
# e.g. for windows
#org.talend.monitoring.jmx.server.OsInfoRetriever.OS_PARTITIONS=C:,D:

# The directory path to the Talend jobserver files
org.talend.remote.jobserver.commons.config.JobServerConfiguration.ROOT_PATH={{ root_path }}
#org.talend.remote.jobserver.commons.config.JobServerConfiguration.ROOT_PATH=C:\\TalendJobServersFiles

# Set to "true" in order to force the load of the native library. This should be used only for testing the native library.
# The value for production use should be "false". Do not change it if you are not sure about the consequences.
org.talend.monitoring.jmx.server.OsInfoRetriever.FORCE_LOAD={{ force_load }}

# Set the shell which launches the jobs, WARNING: enable these properties prevent to kill a job properly
org.talend.remote.jobserver.commons.config.JobServerConfiguration.LAUNCH_SHELL_SCRIPT={{ launch_shell_script }}
#org.talend.remote.jobserver.commons.config.JobServerConfiguration.SHELL_WINDOWS=
#org.talend.remote.jobserver.commons.config.JobServerConfiguration.SHELL_LINUX=/bin/sh

# Set the maximum of concurrent connections to the JobServer
org.talend.remote.server.MultiSocketServer.MAX_CONCURRENT_CONNECTIONS={{ max_concurrent_connections }}

# Set the executable path of the binary which will run the job, for example: /usr/bin/java/java or "c:\\Program Files\\Java\\bin\\java.exe"
org.talend.remote.jobserver.commons.config.JobServerConfiguration.JOB_LAUNCHER_PATH={{ job_launcher_path }}

###############################################################
# Temporary data cleaning parameters
###############################################################

# Time in seconds between each cleaning action, set with 0 to disable all cleanings
org.talend.remote.jobserver.commons.config.JobServerConfiguration.FREQUENCY_CLEAN_ACTION={{ frequency_clean_action }}

# Time in seconds before cleaning executions logs from the current date, 3 months=3*30*24*60*60=7776000, set with 0 to disable delete action with this method
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_DURATION_BEFORE_CLEANING_OLD_EXECUTIONS_LOGS={{ max_duration_before_cleaning_old_executions_logs }}
# Max executions logs to keep, set with 0 to disable delete action with this method.
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_OLD_EXECUTIONS_LOGS={{ max_old_executions_logs }}

# Time in seconds before cleaning archives and deployed jobs from the current date, 3 months=3*30*24*60*60=7776000, set with 0 to disable delete action with this method
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_DURATION_BEFORE_CLEANING_OLD_JOBS={{ max_duration_before_cleaning_old_jobs }}
# Max archive and deployed jobs to keep, set with 0 to disable delete action with this method.
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_OLD_JOBS={{ max_old_jobs }}

# Time in seconds before cleaning cached libs from the current date, 3 months=3*30*24*60*60=7776000, set with 0 to disable delete action with this method
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_DURATION_BEFORE_CLEANING_OLD_LIBS={{ max_duration_before_cleaning_old_libs }}
# Max cached libs to keep, set with 0 to disable delete action with this method.
org.talend.remote.jobserver.commons.config.JobServerConfiguration.MAX_OLD_LIBS={{ max_old_libs }}

